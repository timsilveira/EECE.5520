# Simple Snake Game in Python 3 for Beginners
# By @TokyoEdTech
# modified by Yan Luo
# further modified for MPU6050 control and bonus features
#
# you need to install a few python3 packages
#   pip3 install pyserial

import turtle
import time
import random
import serial

# Note the serial port dev file name
# need to change based on the particular host machine
serialDevFile = 'COM4'   # TODO: change this to match your Arduino port (e.g. '/dev/cu.usbmodem14201' or 'COM4')
ser = serial.Serial(serialDevFile, 9600, timeout=0)

#Variables
delay = 0.15
score = 0
high_score = 0
ppa = 10                 # Points per apple
bonus_mode = False
bonus_timer = 0
bonus_duration = 5.0     # seconds of bonus mode after shaking detected

#Screen
wn = turtle.Screen()
wn.title("Snake Game by @TokyoEdTech (mod by YL, extended for MPU6050)")
wn.bgcolor("green")
wn.setup(width=600, height=600)
wn.tracer(0)  # Turns off the screen updates for smoother animation

#Snake Head
head = turtle.Turtle()
head.speed(0)
head.shape("square")
head.color("black")
head.penup()
head.goto(0, 0)
head.direction = "stop"

#food
food = turtle.Turtle()
food.speed(0)
food.shape("circle")
food.color("red")
food.penup()
food.goto(0, 100)

#Snake segments
segments = []

#Score
pen = turtle.Turtle()
pen.speed(0)
pen.shape("square")
pen.color("white")
pen.penup()
pen.hideturtle()
pen.goto(0, 260)
pen.write("Score: 0  High Score: 0  P/A: 10", align="center", font=("Courier", 24, "normal"))

#Functions
def go_up():
    if head.direction != "down":
        head.direction = "up"

def go_down():
    if head.direction != "up":
        head.direction = "down"

def go_left():
    if head.direction != "right":
        head.direction = "left"

def go_right():
    if head.direction != "left":
        head.direction = "right"

def move():
    if head.direction == "up":
        y = head.ycor()
        head.sety(y + 20)
    if head.direction == "down":
        y = head.ycor()
        head.sety(y - 20)
    if head.direction == "left":
        x = head.xcor()
        head.setx(x - 20)
    if head.direction == "right":
        x = head.xcor()
        head.setx(x + 20)

def set_direction(cmd):
    # Helper function to handle direction commands from serial input
    if cmd == "up" and head.direction != "down":
        head.direction = "up"
    elif cmd == "down" and head.direction != "up":
        head.direction = "down"
    elif cmd == "left" and head.direction != "right":
        head.direction = "left"
    elif cmd == "right" and head.direction != "left":
        head.direction = "right"

# Keyboard bindings
wn.listen()
wn.onkey(go_up, "w")
wn.onkey(go_down, "s")
wn.onkey(go_left, "a")
wn.onkey(go_right, "d")

#Game loop
while True:
    start_time = time.time()
    wn.update()

    # TODO: notes by Prof. Luo
    # You need to add your code to read control information from serial port
    # then use that information to set head.direction
    # For example:
    # if control_information == 'w':
    #     head.direction = "up"
    # elif control_information == 's':
    #     head.direction = "down"
    
    try:
        data = ser.readline().decode().strip()
        if data:
            if data == 'w':
                set_direction("up")
            elif data == 's':
                set_direction("down")
            elif data == 'a':
                set_direction("left")
            elif data == 'd':
                set_direction("right")
            elif data == 'E':
                # TODO: notes by Prof. Luo
                # This flag comes from Arduino when the Python side tells it a food was eaten.
                # Arduino can use this to beep the buzzer.
                pass
            elif data == 'B':
                # TODO: notes by Prof. Luo
                # Shaking detected by the MPU6050
                # Activate bonus mode (double points and golden apple)
                bonus_mode = True
                bonus_timer = time.time()
                food.color("gold")
                ppa = 20
                print("Bonus Mode Activated!")
    except Exception as e:
        print("Serial read error:", e)

    #Bonus Timer
    if bonus_mode and (time.time() - bonus_timer > bonus_duration):
        bonus_mode = False
        food.color("red")
        ppa = 10
        print("Bonus mode ended")

    #Check for collision with border
    if head.xcor() > 290 or head.xcor() < -290 or head.ycor() > 290 or head.ycor() < -290:
        time.sleep(0.5)
        head.goto(0, 0)
        head.direction = "stop"

        # Hide the segments
        for segment in segments:
            segment.goto(1000, 1000)
        segments.clear()

        # Reset the score
        score = 0
        delay = 0.15

        pen.clear()
        pen.write("Score: {}  High Score: {}  P/A: {}".format(score, high_score, ppa),
                  align="center", font=("Courier", 24, "normal"))

    #Check for collision with food
    if head.distance(food) < 20:
        # TODO: notes by Prof. Luo
        # When apple is eaten, send a flag to Arduino so it can beep the buzzer.
        ser.write(b'E')

        # Move the food to a random spot
        x = random.randint(-290, 290)
        y = random.randint(-290, 290)
        food.goto(x, y)

        # Add a segment
        new_segment = turtle.Turtle()
        new_segment.speed(0)
        new_segment.shape("square")
        new_segment.color("grey")
        new_segment.penup()
        segments.append(new_segment)

        # Increase the score
        score += ppa
        if score > high_score:
            high_score = score

        pen.clear()
        pen.write("Score: {}  High Score: {}  P/A: {}".format(score, high_score, ppa),
                  align="center", font=("Courier", 24, "normal"))

    #Move body segments
    for index in range(len(segments) - 1, 0, -1):
        x = segments[index - 1].xcor()
        y = segments[index - 1].ycor()
        segments[index].goto(x, y)

    # Move first body segment to follow head
    if len(segments) > 0:
        x = head.xcor()
        y = head.ycor()
        segments[0].goto(x, y)

    #Move snake head
    move()

    #Check for head collision with body 
    for segment in segments:
        if segment.distance(head) < 20:
            time.sleep(0.5)
            head.goto(0, 0)
            head.direction = "stop"

            # Hide all body segments
            for segment in segments:
                segment.goto(1000, 1000)
            segments.clear()

            # Reset score
            score = 0
            delay = 0.15

            pen.clear()
            pen.write("Score: {}  High Score: {}  P/A: {}".format(score, high_score, ppa),
                      align="center", font=("Courier", 24, "normal"))

    
    frame_time = time.time() - start_time
    if frame_time < delay:
        time.sleep(delay - frame_time)

wn.mainloop()
